{
  "arrays": "// a scatter plot of points with emojis for: mount fuji, a rocket, a whale, a watermellon, and a donut\n<Plot xlim={[0, 6]} ylim={[0, 6]} xticks={7} yticks={7} margin={0.15}>\n  { [ '🗻', '🚀', '🐋', '🍉', '🍩' ].map((e, i) =>\n    <Emoji pos={[i+1, i+1]} rad={0.4}>{e}</Emoji>\n  ) }\n</Plot>\n",
  "axis": "// a horizontal axis with 5 ticks labeled with emojis for: mount fuji, a rocket, a whale, a watermellon, and a donut\nconst emoji = ['A', 'B', 'C', 'D', 'E']\nconst ticks = zip(linspace(0, 1, emoji.length), emoji)\nreturn <Box margin={0.3}>\n  <HAxis ticks={ticks} aspect={15} />\n</Box>\n",
  "barplot": "// A plot with three bars with black borders at \"A\", \"B\", and \"C\". The first bar is red and is the shortest, the second bar is blue and is the tallest, while the third bar is green and its height is in between.\n<BarPlot ylim={[0, 10]} yticks={6} title=\"Example BarPlot\" xlabel=\"Category\" ylabel=\"Value\" bar-rounded bar-border={0} margin={0.25}>\n  <Bar label=\"A\" size={3} fill={red} />\n  <Bar label=\"B\" size={8.5} fill={blue} />\n  <Bar label=\"C\" size={6.5} fill={green} />\n</BarPlot>\n",
  "box": "// the text \"hello!\" in a frame with a dashed border and rounded corners\n<Frame padding rounded border-stroke-dasharray={5}>\n  <Text>hello!</Text>\n</Frame>\n",
  "colors": "// A plot of an inverted sine wave where the line markers are sized in proportion to the amplitude and the color ranges from blue to red depending on the phase. The x-axis ticks are labeled with multiples of π. The x-axis is labeled \"phase\" and the y-axis is labeled \"amplitude\". The title is \"Inverted Sine Wave\".\nconst func = x => -sin(x)\nconst pal = palette(blue, red, [-1, 1])\nconst size = (x, y) => 0.1 * (1+abs(y))/2\nconst xticks = linspace(0, 2, 6).slice(1).map(x => [x*pi, `${rounder(x, 1)} π`])\nreturn <Plot xlim={[0, 2*pi]} ylim={[-1, 1]} aspect={1.5} xanchor={0} xaxis_tick_pos=\"both\" xticks={xticks} grid xlabel=\"phase\" ylabel=\"amplitude\" title=\"Inverted Sine Wave\" margin={0.25}>\n  <DataPath fy={func} />\n  <DataPoints fy={func} size={size} N={21}>\n    { (x, y) => <Circle fill={pal(y)} /> }\n  </DataPoints>\n</Plot>\n",
  "context": "// create a square context of radius 50 centered at 100 and map [0.3, 0.5] to pixel coordinates\nconst prect = [ 50, 50, 150, 150 ]\nconst ctx = new Context({ prect })\nconst [fx, fy] = [0.3, 0.5]\nconst [px, py] = ctx.mapPoint([fx, fy])\nconst text = `[${fx}, ${fy}] → [${px}, ${py}]`\nreturn <Text>{text}</Text>\n",
  "datafill": "// a decaying sine wave filled in with blue\nconst decay = x => exp(-0.1*x) * sin(x)\nreturn <Graph xlim={[0, 6*pi]} ylim={[-1, 1]} aspect={phi}>\n  <DataFill fy1={decay} fy2={0} fill={blue} fill_opacity={0.5} N={250} />\n  <DataPath fy={decay} N={250} />\n</Graph>\n",
  "datapath": "// plot two lines: (1) a sine wave in red; (2) the same sine wave with a lower amplitude higher frequency sine wave added on top (in blue)\n<Plot xlim={[0, 2*pi]} ylim={[-1.5, 1.5]} aspect={phi} margin={0.2} grid>\n  <DataPath fy={sin} stroke={red} stroke_width={2} />\n  <DataPath fy={x => sin(x) + 0.2*sin(5*x)} stroke={blue} stroke_width={2} />\n</Plot>\n",
  "datapoints": "// Circles spiraling outwards. They have black borders and semi-transparent fills. They are tinted blue at the outside and red towards the inside. They are framed by a circle with a black border and a gray background.\nconst freq = 38 * pi\nconst pal = palette(red, blue)\nconst fx = t => (t/freq) * cos(t)\nconst fy = t => (t/freq) * sin(t)\nreturn <Graph xlim={[-1.1, 1.1]} ylim={[-1.1, 1.1]}>\n  <Circle pos={[0, 0]} rad={1} fill=\"#eee\" />\n  <DataPoints fx={fx} fy={fy} tlim={[0, freq]} N={100} size={0.05}>\n    { (x, y, t, i) => <Circle fill={pal(t/freq)} opacity={0.75} /> }\n  </DataPoints>\n</Graph>\n",
  "datapoly": "// A circle with an oscilating radius. The circle has a solid black border and is filled in with blue. The result should look like a splat.\nconst [freq, amp] = [5, 0.25];\nconst famp = t => 1 + amp * sin(freq*t);\nreturn <Frame padding margin border rounded border_fill=\"#eee\">\n  <Graph xlim={[-1, 1]} ylim={[-1, 1]} aspect={1}>\n    <SymPoly fx={t => famp(t) * cos(t)} fy={t => famp(t) * sin(t)} tlim={[0, 2*pi]} N={500} fill={blue} opacity={0.75} />\n  </Graph>\n</Frame>\n",
  "edge": "// A curved line going from the upper left to the lower right. The left side of the line has a red arrow facing left and the right side has a blue arrow facing right. Both arrows are triangular with black borders.\n<Network edge-arrow edge-arrow-base>\n  <Node label=\"hello\" pos={[0.2, 0.2]} fill>Hello</Node>\n  <Node label=\"world\" pos={[0.8, 0.8]} fill>World!</Node>\n  <Edge node1={\"hello\"} node2={\"world\"} arrow-beg-fill={red} arrow-end-fill={blue} />\n</Network>\n",
  "element": "// create a custom triangle element called `Tri` and use it to create a triangle with a gray fill\nclass Tri extends Element {\n  constructor({ children, pos0, pos1, pos2, ...attr }) {\n    super({ tag: 'polygon', unary: true, ...attr })\n    this.coords = [pos0, pos1, pos2]\n  }\n  props(ctx) {\n    const pixels = this.coords.map(c => ctx.mapPoint(c))\n    const points = pixels.map(([x, y]) => `${x},${y}`).join(' ')\n    return { points, ...this.attr }\n  }\n}\n\nreturn <Tri pos0={[0.5, 0.1]} pos1={[0.9, 0.9]} pos2={[0.1, 0.9]} fill=\"#eee\" />\n",
  "ellipse": "// two ellipses, one wider and one taller\n<Group>\n  <Ellipse pos={[0.3, 0.2]} rad={[0.2, 0.1]} />\n  <Ellipse pos={[0.6, 0.6]} rad={[0.2, 0.25]} />\n</Group>\n\n",
  "emoji": "// draw a row of emojis with various faces\n<HStack spacing={0.1}>\n  { [ 'grinning', 'neutral_face', 'scream', 'joy', 'heart_eyes' ].map(t =>\n    <Frame rounded fill>\n      <Emoji>{t}</Emoji>\n    </Frame>\n  ) }\n</HStack>\n",
  "graph": "// a series of closely spaced squares rotating clockwise along a sinusoidal path\n<Graph padding={0.2}>\n  <DataPoints fy={sin} size={0.5} xlim={[0, 2*pi]} N={150}>\n    { x => <Square spin={r2d*x} /> }\n  </DataPoints>\n</Graph>\n",
  "grid": "// draw a grid of square boxes filled in light gray. each box contains an arrow that is pointing in a particular direction. that direction rotates clockwise as we move through the grid.\n<Frame padding rounded>\n  <Grid rows={3} spacing>\n    { linspace(0, 360, 10).slice(0, 9).map(th =>\n      <Frame padding rounded fill>\n        <Group aspect={1} spin={th}>\n          <Arrow direc={0} tail={1} pos={[1, 0.5]} rad={0.5} />\n        </Group>\n      </Frame>\n    ) }\n  </Grid>\n</Frame>\n",
  "group": "// a square in the top left and a circle in the bottom right\n<Group>\n  <Rect pos={[0.3, 0.3]} rad={0.1} spin={15} />\n  <Ellipse pos={[0.7, 0.7]} rad={0.1} />\n</Group>\n",
  "gum": "// The text \"GUM\" in a simple frame\n<Frame padding margin border rounded>\n  <Text>GUM</Text>\n</Frame>\n",
  "latex": "// There are two latex equations framed by rounded borders arranged vertically. The top one shows a Gaussian integral and the bottom one shows a trigonometric identity. They are framed by a square with the title \"Facts\".\n<VStack spacing>\n  <Frame padding rounded><Latex rounded>{\"\\\\int_0^{\\\\infty} \\\\exp(-x^2) dx = \\\\sqrt{\\\\pi}\"}</Latex></Frame>\n  <Frame padding rounded><Latex rounded>{\"\\\\sin^2(\\\\theta) + \\\\cos^2(\\\\theta) = 1\"}</Latex></Frame>\n</VStack>\n",
  "line": "// draw a line from the top left to the bottom right of the frame\n<Frame>\n  <Line pos1={[0, 0]} pos2={[1, 1]} />\n</Frame>\n",
  "math": "// plot the exponential of sin(x) over [0, 2π]\n<Frame margin={0.15}>\n  <Plot aspect={phi} ylim={[0, 3]}>\n    <DataPath fy={x => exp(sin(x))} xlim={[0, 2*pi]} />\n  </Plot>\n</Frame>\n",
  "network": "// A network with a node on the left saying \"hello world\" and two nodes on the right saying \"hello\" and \"world\". There are arrows going from the left node to each of the right nodes. The nodes have gray backgrounds and rounded corners.\n<Network coord={[0, 0, 2, 1]} aspect={phi}>\n  <Node label=\"hello world\" pos={[0.4, 0.5]} rad={0.2} fill>{[\"Hello\", \"world!\"]}</Node>\n  <Node label=\"hello\" pos={[1.4, 0.25]} rad={0.15} fill>Hello</Node>\n  <Node label=\"world\" pos={[1.6, 0.75]} rad={0.15} fill>World!</Node>\n  <Edge node1={\"hello world\"} node2={\"hello\"} dir1=\"n\" arrow-size={0.07} />\n  <Edge node1={\"hello world\"} node2={\"world\"} dir1=\"s\" arrow-size={0.07} />\n</Network>\n",
  "node": "// Two boxes with text in them that have black borders and gray interiors. The box in the upper left says \"hello\" and the box in the lower right says \"world!\".\n<Network node-fill>\n  <Node label=\"hello\" pos={[0.2, 0.2]}>Hello</Node>\n  <Node label=\"world\" pos={[0.8, 0.8]}>World!</Node>\n  <Edge node1={\"hello\"} node2={\"world\"} />\n</Network>\n",
  "plot": "// plot an inverted sine wave with ticks labeled in multiples of π. There is a faint dashed grid. The x-axis is labeled \"phase\" and the y-axis is labeled \"amplitude\". The title is \"Inverted Sine Wave\".\nconst xticks = linspace(0, 2, 6).slice(1).map(x => [x*pi, `${rounder(x, 1)} π`])\nreturn <Plot aspect={phi} xanchor={0} xticks={xticks} grid xlabel=\"phase\" ylabel=\"amplitude\" title=\"Inverted Sine Wave\" xaxis_tick_pos=\"both\" grid_stroke_dasharray={3} margin={0.25}>\n  <DataPath fy={x => -sin(x)} xlim={[0, 2*pi]} />\n</Plot>\n",
  "points": "// A plot of three different increasing curves of varying steepness and multiple points spaced at regular intervals. The x-axis label is \"time (seconds)\", the y-axis label is \"space (meters)\", and the title is \"Spacetime Vibes\". There are axis ticks in both directions with assiated faint grid lines.\n<Frame margin={0.2}>\n  <Plot xlim={[-1, 1]} ylim={[-1, 1]} grid xlabel=\"time (seconds)\" ylabel=\"space (meters)\" title=\"Spacetime Vibes\">\n    <Points size={0.02}>{\n      [[0, 0.5], [0.5, 0], [-0.5, 0], [0, -0.5]]\n    }</Points>\n    <Rect pos={[0.5, 0.5]} rad={0.1} />\n    <Circle pos={[-0.5, -0.5]} rad={0.1} />\n    {[0.5, 0.9, 1.5].map(a =>\n      <DataPath fy={x => sin(a*x)} />\n    )}\n  </Plot>\n</Frame>\n",
  "polyline": "// a square in the center of the figure that is missing its top side\n<Polyline>{[\n  [0.3, 0.3],\n  [0.3, 0.7],\n  [0.7, 0.7],\n  [0.7, 0.3],\n]}</Polyline>\n",
  "rect": "// a rectangle on the left side of the figure with an aspect of roughly 1/2\n<Frame>\n  <Rect pos={[0.25, 0.5]} rad={[0.1, 0.2]}/>\n</Frame>\n",
  "stack": "// one large donut in a frame stacked on top of two smaller side-by-side framed donuts\nconst Donut = () => <Frame><Emoji>🍩</Emoji></Frame>\nreturn <VStack>\n  <Donut/>\n  <HStack>\n    <Donut/>\n    <Donut/>\n  </HStack>\n</VStack>\n",
  "text": "// The text \"Hello World!\" / \"Multiline text is supported.\" in a rounded frame\n<TextFrame rounded>\n  Hello World!\n  Multiline text is supported.\n</TextFrame>\n",
  "textbox": "// draw the word \"hello\" in a rounded rectangular frame\n<TextBox border rounded margin>hello</TextBox>\n",
  "titleframe": "// Various food emojis are arrnaged in a spaced out grid and framed with the title \"Fruits & Veggies\". Each emoji is framed by a rounded square with a gray background.\nconst emoji = [ '🍇', '🥦', '🍔', '🍉', '🍍', '🌽', '🍩', '🥝', '🍟' ]\nreturn <TitleFrame title=\"Fruits & Veggies\" margin padding rounded>\n  <Grid rows={3} spacing={0.05}>\n    {emoji.map(e =>\n      <Frame rounded fill padding><Emoji>{e}</Emoji></Frame>\n    )}\n  </Grid>\n</TitleFrame>\n",
  "triangle": "// make a diamond shape with two triangles, the triangle on top is red and the triangle on the bottom is blue\n<Frame margin rounded padding fill>\n  <VStack>\n    <Triangle fill={red} aspect={1} stroke-width={0} />\n    <Triangle fill={blue} aspect={1} stroke-width={0} vflip />\n  </VStack>\n</Frame>\n",
  "unitline": "// draw a plus symbol in a frame and place it in the bottom left corner\n<Group pos={[0.3, 0.7]} rad={0.2}>\n  <VLine />\n  <HLine />\n</Group>\n"
}